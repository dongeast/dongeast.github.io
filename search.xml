<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第2章-传感器的基本特性</title>
      <link href="2020/09/23/%E7%AC%AC2%E7%AB%A0-%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/"/>
      <url>2020/09/23/%E7%AC%AC2%E7%AB%A0-%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>###传感器的基本特性是指传感器的输入-输出关系特性是传感器的内部结构参数作用关系的外部特征表现<br>    1）传感器所测量的量基本上有两种形式：稳态（静态或准静态）和动态（周期变化或瞬态）。——是否随时间变化及变化速率<br>    2）传感器存在静态特性和动态特性。</p><p>##传感器的静态特性<br>静态特性所描述的传感器的输入-输出关系式中不含时间变量。<br>静态特性的主要指标是线性度、灵敏度、分辨率、迟滞、重复性和漂移。</p><p>#线性度<br>    1）线性度是指传感器的输出和输入间成线性关系的程度。<br>    2）多数情况下使用最小二乘法来求出拟合直线（切线或割线拟合/理论拟合、过零旋转拟合、端点连线拟合、端点平移拟合）</p><p>#灵敏度<br>    1）灵敏度是传感器在稳态下输出变化对输入量变化的比值。<br>    2）表达的是传感器对输入量微小变化的敏感程度。</p><p>#分辨率<br>    1）分辨率是指传感器能够感知或检测到的最小输入信号增量，反映传感器能够分辨被测量微小变化的能力。<br>    2）分辨率可以用增量的绝对值或增量与满量程的百分比来表示。<br>    3）通常将模拟式传感器的分辨率规定为最小刻度分格值的一半，数字式传感器的分辨率是最后一位的一个字。</p><p>#迟滞<br>    1）迟滞也叫回程误差，是指在相同测量条件下，对应于同一大小的输入信号，传感器正、反行程的输出信号大小不相等的现象。<br>    2）表明传感器正反行程期间输入-输出特性曲线不重合的程度。</p><p>#重复性<br>    1）重复性表示传感器在输入量按同一方向做全量程多次测试时所得输入-输出特性曲线一致的程度。</p><p>#漂移<br>    1）漂移是指传感器在输入量不变的情况下，输出量随时间或温度等变化的现象。<br>    2）漂移将影响传感器的稳定性或可靠性。<br>    3）影响原因：<br>        一是传感器自身结构参数发生老化；<br>        二是在测试过程中周围环境发生变化；</p><p>##传感器的动态特性</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习开发指南</title>
      <link href="2020/09/23/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
      <url>2020/09/23/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>单片机简介</p><p>​</p><p>单片机是就是在一片半导体硅片上，集成了</p><p>中央处理单元（CPU）</p><p>存储器（RAM、ROM）<br>中断系统</p><p>定时器/计数器</p><p>并行I/O<br>串行I/O<br>时钟电路</p><p>系统总线</p><p>（别看人家尺寸很小，五脏俱全喔~）</p><p>用于测控领域的单片微型计算机！</p><p>简单来说，单片机就是一台迷你的计算机主机，个头小，能力当然也就没有那么强啦！但是千万不要小瞧它哦！就像超能陆战队里的小机器人一样，数量大起来，威力可是连大型计算机也无法比拟的！</p><p>关于这个小东西，也有很多称呼，国际名“嵌入式控制器”（EMCU）或“微控制器”（MCU），本土小名就是“单片机”，土里土气，没有道理。</p><p>单片机的问世就是计算机技术发展史上的大事件，区分开了我们一般见到的通用计算机和嵌入式计算机。因为单片机体积小，价格便宜，人们最最最喜欢用它来制造一些奇思妙想的小零件，小设备或者功能简单的大型设备中，看起来就像被嵌入进去的小东西，所以嵌入式计算机的名号就响亮起来咯！</p><p>敲黑板的知识点：</p><p>单片机按照用途可分为两大类：通用型和专用型，物如其名，通用型就是很通用的哦！只要客户您满意就可以随心所欲的对其进行改造，通过单片机的接口，随便从某位大佬手中找份代码就可以制作出自己满意的小玩具，换换代码就能再玩几周，新鲜劲儿永存，光辉不灭！专用型则是针对特定产品制造的单片机了。要想玩得欢，当然选通用！其实两者最大的差距就是，专用型只有设计好的、精简硬件结构，而通用型呢？能实现大多数功能。使用单片机制作一个玩具，没有用到的软硬件就算浪费掉了，所以通用型也就更适合重复使用哦！</p><p>是不是知识高速输入，强大的力量让客官您血脉膨胀，坚持下去，定能打通任督二脉，习得绝世神功，做出来超赞小作品，馋哭隔壁小屁孩，拿到社区最赞手工制作小达人，全家称赞，闻名远近！要想玩的溜，知识得学够！</p><p>如何专业的选择一款单片机上手</p><p>正如之前所说，单片机就像一台主机一样，想要细致的选择一款单片机，需要考虑的方面的买一台电脑差不多，不过考虑的因素还是少很多，毕竟单片机相比电脑小太多啦！单片机发展了这么多年，它本身具有的品牌和系列远多于电脑，就像买新电脑一样，你永远买不到最好的那一款（土豪请忽略，只是贫穷限制了我组织语言的能力），但你想要买到最适合自己的那一款却很简单，适合自己的才是最好的，了解自己的需求才有挑选的标准可言。</p><p>让我们了解一下单片机基本的系列吧</p><p>最最最被普遍使用的的两个系列：</p><p>MCS-51    和    AT89S5X系列单片机</p><p>（一定要记住！不知道他俩，你就对这股可怕的力量一无所知！）</p><p>如果你记住了名字，我们的时尚手工达人就成功了一半！再有选择性的记住一些靠谱的知识点，就可以知道他们是啥了。</p><p>MCS-51：——（C代表CMOS工艺）</p><p>基本型产品主要包括8031/8051/8751（对应的CMOS工艺的低功耗型为80C31/80C51/80C71和增强型产品8032/8052/8072）</p><p>AT89S5X：——（S代表含有串行下载的Flash存储器）</p><p>AT89C5X系列已经不再生产，可直接用对应的S系列替换，时钟频率和运算速度都有很大的提高。AT89S52单片机是一款代表机型。</p><p>AT89XXXX系列单片机型号说明：</p><p>示例：AT89S52-24PU</p><p>1）前缀：</p><p>AT——ATMEL公司产品</p><p>2）型号：</p><p>89——8 单片，9 内部含有flash存储器；</p><p>C：CMOS产品    LV：低电压产品，可在2.5电压下工作    S：表示含有串行下载的Flash存储器；</p><p>“XXXX”：表示器件型号</p><p>3）后缀：由最后四个参数组成</p><p>前两个数表示时钟频率为12MHz或24MHz</p><p>第三位表示封装：</p><p>P：塑料双列直插DIP封装</p><p>A：TQFP封装</p><p>J：PLCC封装</p><p>Q：PQFP封装</p><p>W：裸芯片</p><p>最后是温度范围，工作温度范围随C-U-I-A-M等级依次增加</p><p>单片机实在是太多了，但是学习的方法都是一样的一通百通，除了经典的51系列，还有两个有趣的：</p><p>（1）嵌入式DSP处理器擅长实现各种数字信号处理运算；</p><p>（2）嵌入式微处理器的基础是通用计算机中的CPU。</p><p>如果你耐心地看完上边的知识<br>还记得住MCS51和AT89S52<br>你就已经入门了！<br>你真的好棒！</p><p>接下来让我们以最最最经典的AT89S52继续我们的世界探索之旅吧!</p><p>首先,存住!</p><p>一个优秀的硬件设计员, 应该头上不是头发,而是硬件的结构图!</p><p>只有牢记你的对象,你的编程才能随心所欲!</p><p>众所周知, 计算机是只认0和1的, 面对只具有简化的功能的单片机, 我们更要从基础出发, 在编程的时候, 你想控制灯的亮灭, 不是考虑怎么实现关灯, 而是怎么让单片机将你的命令翻译成0输出(一般0为灭, 1为亮).</p><p>之前已经见过单片机的各种封装方式, 当我们见到单片机时我们并不需要直接面对它复杂的电路设计和具体功能的硬件实现, 它的内部结构只需要我们在编程的时候记得, 因为我们需要知道控制一个开关开合的时候, 需要将数据送到哪处理并输出, 达成目的. </p><p>所以,我们需要记得的就是我们需要调用的功能硬件和输入输出的通接口, 我们用接口转移数据, 用内部结构进行我们的逻辑实现. </p><p>引脚的分类</p><p>AT89S52共有44个引脚,有4个引脚是没有用处的标记为”NC”, 其他的40只引脚按功能分为三类:</p><p>1)电源及时钟引脚<br>Vcc       接+5V电源<br>Vss       接数字地<br>XTAL1  片内时钟振荡器的反相放大器的输入端<br>XTAL2  片内时钟振荡器的反相放大器的输出端</p><p>2)控制引脚<br>PSEN             当访问片外程序存储器读取指令码时,每个时钟周期产生两次有效信号.;<br>ALE/PROG     ALE的负跳变将P0口变为8位数据总线用(分时复用); PROG是对片内Flash进行编程时, 该引脚接入编程脉冲输入端;<br>EA/Vpp       EA=1可读取片内外的程序存储器, EA=0时只能读取片外内容; Vpp是对片内Flash进行编程时, 该引脚接入编程电压;<br>RST(RESET)   复位信号输入端, 高电平持续2个机器周期有效;</p><p>3)I/O口引脚    P0  P1  P2  P3  4个八位并行I/O口的外部引脚</p><p>只有P0是双向口，其他是准双向口。</p><p>CPU</p><p>AT89S52的CPU由运算器和控制器组成。</p><p>运算器主要用来对操作数进行算术、逻辑和位操作运算。主要包括算术逻辑运算单元ALU、累加器、位处理器、程序状态字寄存器PSW及两个暂存器等。</p><p>ALU功能强可进行８位变量的逻辑运算和基本算术运算还具有位操作功能。<br>累加器A是一个８位寄存器，是32个特殊功能寄存器之一.1)是ALU单元的输入数据源之一,同时又是ALU运算结果的存放单元.2)CPU的数据传送大多数经过累加器A,所以累加器又相当于数据的中转站.</p><p>(累加器A的进位位Cy又是位处理器的位累加器)</p><p>程序状态字寄存器  PSW  :</p><p>Cy    进位标志位</p><p>Ac    辅助进位标志位</p><p>F0    用户使用的标志位</p><p>RS1  RS0    4组工作寄存器区选择控制位1和位0</p><p>OV    溢出标志位</p><p>P    奇偶标志位</p><p>控制器的主要任务是识别指令,并根据指令的性质控制单片机片内各部件,从而保证协调工作.</p><p>控制器主要包括程序计数器, 指令寄存器, 指令译码器, 定时及控制电路等. 功能就是控制指令的读入, 译码, 执行, 从而对单片机的各功能部件进行定时和逻辑控制. </p><p>程序计数器PC是控制器中最基本的寄存器, 是程序存储器中的地址指针，PC是一个单独的16位计数器，用户不能直接使用指令对PC进行访问，当程序复位时，PC的内容变为0000H。PC也称程序指针。</p><p>程序计数器的计数宽度决定了访问程序存储器的地址范围。</p><p>存储器的结构</p><p>程序存储器分为片内和片外两部分，AT89S52有8KB的flash存储器可在线编程（ISP），还可在外部最多扩展64KB的程序存储器。<br>（程序存储器的某些单元被固定用于各中断源的中断服务程序的入口地址，中断入口地址和0000H的起始地址存放的都是跳转指令。）</p><p>数据存储器片内有256B的RAM，片外最多可扩展64KB的RAM。</p><p>牢记！</p><p>特殊功能寄存器有32个，SFR反映片内的实际工作情况。</p><p>（凡是可进行位寻址的SFR。其字节地址的末位只能是0H或8H）</p><p>位地址空间共有219个可寻址位，它们位于片内RAM区字节地址20H<del>2FH（128位）和特殊功能寄存器区中离散分布在80H</del>FFH的91个可寻址位（凡是可寻址的特殊功能寄存器，其最低位的位地址与其字节地址相同）。</p><p>介绍6个特殊功能寄存器：</p><p>1）堆栈指针SP：堆栈只能设在片内的RAM区，单片机复位后SP的内容为07H，堆栈实际上从08H单元开始，但为了避免和08H~1FH单元的三组工作寄存器区冲突，所以，单片机复位后，首先把SP的值改为60H。</p><p>堆栈主要是为了子程序调用和中断操作而设立的，有两个功能：保护断点和现场保护。</p><p>堆栈有两种操作，一种是数据压入（PUSH），一种是数据弹出（POP）。<br>2）寄存器B，单片机在进行乘除操作时要使用寄存器B，不执行乘除时，可作为普通寄存器来使用。</p><p>3）AUXR寄存器是辅助寄存器</p><p>disale：ALE的禁止允许位<br>disrto：看门狗定时器WDT溢出时的复位输出<br>wdidle：WDT在空闲模式下的控制位</p><p>4）数据指针DPTR0和DPTR1为双数据指针寄存器，为方便访问数据存储器而设置。AUXR1的DPS位用于选择这两个指针。</p><p>5）AUXR1是辅助存储器</p><p>6）看门狗定时器WDT：防止程序陷入死循环或者跑飞的状态。</p><p>并行I/O端口</p><p>AT89S52共有4个双向的8位并行I/O端口，即P0,P1.P2.,P3特殊功能寄存器就是这4个端口的输出锁存器。4个端口除了按字节输入/输出外还可按位寻址，便于实现位控功能。</p><p>P0总结：双功能口</p><p>1）当P0作为地址/数据总线口使用时，是一个真正的双向口，用作与外部扩展的存储器或I/O连接，输出低8位地址和输出/输入8位数据。</p><p>2）当P0作为通用I/O口时，各引脚需要在片外接上拉电阻，此时端口不存在高阻抗的悬浮状态，因此是一个准双向口。</p><p>P1总结：通用I/O端口</p><p>P1口由于又内部上拉电阻，没有高阻抗输入状态，故为准双向口。作为输出口时，不需要在片外接上拉电阻。</p><p>P1口“读引脚”输入时，必须先向P1口的锁存器写入1。</p><p>P2总结：双功能口</p><p>1）P2口作为高8位地址总线使用时，可输出外部存储器或I/O的高八位地址，与P0输出并经锁存器的锁存的低8位地址一起构成16位地址，共可寻址64KB的片外地址空间。当P2口作为高8位地址输出口时，输出锁存器的内容保持不变。</p><p>2）P2口作为通用I/O口使用时为准双向口，功能与P1口一样。</p><p>P3口总结：第二输出功能和第二输入功能</p><p>P3口内部有上拉电阻，不存在高阻抗的输入状态，故为准双向口。</p><p>P3口的每一个引脚都有第一功能和第二功能，完全由指令控制来自动切换。引脚输入部分有两个缓冲器，第二功能的输入信号取自缓冲器BUF3的输出端，第一功能的输入信号取自缓冲器BUF2的输出端。</p><p>时钟电路</p><p>常用的时钟电路有两种方式，一种是内部时钟方式，一种是外部时钟方式。</p><p>AT89S52最高支持的时钟频率为33MHz。</p><p>内部时钟方式：XTAL1输入，XTAL2输出，30pF电容，6MHz、12MHz、11.0592MHz的石英晶体。</p><p>外部时钟方式：XTAL1接入外部振荡器，XTAL2悬空</p><p>时钟周期Tosc是时钟晶体的振荡频率的倒数。</p><p>一个机器周期是12个时钟周期，分为6个状态（S）。</p><p>指令周期，执行一条指令所需要的时间。</p><p>复位操作</p><p>当单片机复位时，PC被初始化为0000H，单片机的复位速度比外部扩展的I/O接口电路快些，为了保证系统可靠复位，初始化程序会安排复位延迟时间。</p><p>片内最小应用系统：8KB闪烁存储器，256B的RAM单元，4个I/O口，外接时钟电路和复位电路即构成了一个AT89S512单片机最小应用系统。</p><p>应该在固定时间内不断复位重启单片机，防止不必要的溢出。</p><p>单片机有两种低功耗节电模式：空闲模式和掉电模式。在掉电模式下Vcc可由后备电源供电。这两种模式可通过特殊功能寄存器PCON的位IDL和位PD的设置来实现。</p><p>1）SMOD    串行通信的波特率选择位</p><p>2）GF1、GF0    通用标志位，供用户使用</p><p>3）PD    掉电模式控制位，若PD=1进入掉电模式，中断外部中断唤醒和硬件复位。</p><p>4）IDL    空闲模式控制位，若IDL=1进入空闲运行模式，中断退出和硬件复位退出。</p><p>​8051系统共111条指令：</p><p>49条单字节指令</p><p>45条双字节指令</p><p>17条三字节指令</p><p>执行时间：</p><p>64条一周期</p><p>45条二周期</p><p>乘除为四周期</p><p>一条指令通常由操作码和操作数组成</p><p>指令系统的7种寻址方式：</p><p>寄存器寻址、直接寻址、寄存器间接寻址、立即数寻址、</p><p>基址寄存器加变址寄存器间址寻址、</p><p>相对寻址、位寻址。</p><p>指令：<br>MOV    数据传输类</p><p>PUSH    进栈指令</p><p>POP    出栈指令</p><p>MOVX    “X”表示访问的是片外RAM或者I/O端口bi’a寄存器</p><p>MOVC    “C”表示程序存储器中的代码</p><p>XCH    将累加器A中的内容与源操作数的内容互唤</p><p>XCHD    累加器A的低4位与内部RAM低４位交换</p><p>ADD　　加法指令</p><p>ADDC    带进位加法指令</p><p>INC    增1指令</p><p>DA    十进制调整指令</p><p>SUBB　　带借位的减法指令<br>DEC    减1指令<br>MUL    乘法指令<br>DIV    除法指令</p><p>CLR    字节清零指令</p><p>SETB　置1<br>CPL    字节求反指令</p><p>RL    左环移</p><p>RLC    带进位左环移</p><p>RR    右环移<br>RRC　　带进位的右环移</p><p>SWAP    半字节交换指令<br>ANL    逻辑与指令<br>ORL    逻辑或指令</p><p>XRL    逻辑异或指令</p><p>LJMP    长跳转</p><p>SJMP    相对跳转</p><p>AJMP    绝对跳转</p><p>JMP    间接跳转</p><p>JZ/JNZ    条件跳转</p><p>CJNE    比较不相等跳转指令</p><p>DJNZ    减1不为0跳转指令</p><p>LCALL    长调用指令</p><p>ACALL    绝对调用指令</p><p>RET    子程序的返回指令</p><p>RETI    中断返回指令</p><p>NOP    空操作指令</p><p>单片机的中断系统</p><p>中断系统有6个中断请求源，两个中断优先级。</p><p>中断源请求标志—中断源允许—总中断允许—中断优先级—硬件查询</p><p>中断请求源：INT0、INT1、T0溢出、T1溢出、串行口中断请求、T2溢出</p><p>中断源是否有中断请求，是由中断请求标志来表示的，标志位由特殊功能寄存器的相应位锁存。</p><p>TCON寄存器：<br>TF1——T1</p><p>TF0——T0</p><p>IE1——INT１</p><p>IE０——INT0</p><p>IT1——选择外部中断请求1是跳沿触发方式还是电平触发</p><p>IT0——同IT１.</p><p>SCON寄存器：</p><p>TI——串行口的发送中断请求标志位</p><p>RI——串行口接收中断请求标志位</p><p>定时器２的控制寄存器T2CON：<br>TF２、EXF２——TF２的请求标志位</p><p>中断允许与中断优先级</p><p>中断允许寄存器IE:</p><p>EA—中断总开关</p><p>ET2—T2</p><p>ES—串行口</p><p>ET1—T1</p><p>EX1—外部中断1</p><p>ET0—T0</p><p>EX0—外部中断0</p><p>中断优先级寄存器IP:</p><p>PT2—T2</p><p>PS—串行口中断</p><p>PT1—T1</p><p>PX1—外部中断1</p><p>PT0—T0<br>PX0—外部中断0</p><p>在各个中断在相同优先级的条件下,外部中断0的中断优先级最高.T2最低.</p><p>外部中断的响应时间:最短响应时间为3个机器周期.</p><p>在这样一个单一中断系统里,对外部中断请求的响应时间总是在3~8个机器周期之间.</p><p>外部中断有两种触发方式:电平触发方式和跳沿触发方式.</p><p>中断请求的撤销</p><p>1)定时器/计数器T1,T0中断请求是自动撤销的.<br>2)跳沿方式的外部中断请求也是自动撤销的,电平触发除了标志位清0外,必要时还需在中断响应后把中断请求信号输入引脚强制改为高电平.<br>3)串行口中断请求的撤销只有标志位清0的问题.</p><p>4)T2的撤销只能使用软件方法,在中断服务程序返回前完成.</p><p>定时器/计数器</p><p>T0由特殊功能寄存器TH0、TL0构成；</p><p>T１由特殊功能寄存器TH1、TL1构成；</p><p>两个定时器/计数器都具有定时器和计数器两种工作模式，4种（方式0、方式1、方式2、方式3）。定时器/计数器属于增1计数器。</p><p>特殊功能寄存器TMOD用于选择T0／T1的工作模式和工作方式，TCON用于控制启动和停止计数并包含两者的状态。</p><p>计数器的起始计数都是从计数器的初值开始。</p><p>TMOD高4位控制T1，低4位控制T0：不可位寻址</p><p>GATE门控位<br>M1，M0工作方式选择位</p><p>C/T计数器模式和定时器模式选择位</p><p>TCON可位寻址</p><p>TF1、TF0    计数溢出标志位</p><p>TR1、TR0    计数运行控制位</p><p>定时器/计数器T0与T1的4种工作方式</p><p>方式0：</p><p>当M1、M0为00时，定时器/计数器的工作方式为方式0；</p><p>寄存器TMOD的C/T位控制的电子开关决定了定时器/计数器的两种工作模式<br>1）C/T=0，开关打在上面的位置，T1（T0）为定时器模式，把系统时钟振荡器12分频后的脉冲作为计数信号。</p><p>2）C/T=1，开关打在下面的位置，开启计数器工作模式</p><p>GATE位的状态决定定时器／计数器的运行控制是取决于TRx还是取决于TRx和INTx这两个条件。</p><p>方式1：</p><p>当M1、M0为01时，定时器/计数器的工作方式方式1；<br>方式1和方式0的差别仅仅在于计数器的位数不同，方式1为16位计数器，方式0为13位计数器。</p><p>方式2：</p><p>当M1、M0为10时，定时器/计数器的工作方式方式2；</p><p>方式0和方式1的最大特点是计数溢出后，计数器为全0.因此在循环定时或循环计数应用时就存在用指令反复装入计数初值的问题，方式2就是为了解决这个问题。</p><p>方式3：</p><p>只适用于定时器/计数器T0。T1设置在方式3停止计数。</p><p>当TMOD的低2位为11时，T0按方式3工作；</p><p>T0工作在方式3时T1的各种工作方式：</p><p>一般情况下，当T1用作串行口的波特率发生器时，T0才工作在方式3.T0处于方式3时，T1可在方式0，1，2，用来作为串行口的波特率发生器，或不需要中断的场合。</p><p>T2的结构和工作方式（不考）</p><p>T2的特殊功能寄存器T2MOD和T2CON</p><p>T2MOD寄存器的各位定义：</p><p>T2OE    输出允许位</p><p>DCEN    计数方式选择</p><p>T2CON：</p><p>TF2—T2计数计满溢出回0中断请求标志位</p><p>EXF2—T2外部中断请求标志位</p><p>RCLK—串行口接受时钟标志位</p><p>TCLK—串行发送时钟标志位</p><p>EXEN2—T2外部采样允许标志位</p><p>TR2—T2启动/停止控制位</p><p>C/T2—T2的定时或计数模式选择位</p><p>CP/RL2—T2捕捉/重新弄装载选择位</p><p>T2的三种工作方式：捕捉、重新装载、波特率发生器</p><p>捕捉就是及时“捕捉”住输入信号发生的跳变及有关信息。</p><p>捕捉有两种方式：</p><p>当EXEN2位=0时，T2是一个16位的定时器/计数器</p><p>当EXEN2位=1时，T2除上述功能外还可增加“捕捉”功能</p><p>当选用T2时，P1.0和P1.1就不能当作I/O口用了。</p><p>重新装载方式：</p><p>T2的重新装载方式根据TCON中的EXEN2的两种状态进行选择，另外根据寄存器T2MOD中的DCEN位是0还是1来选择加1还是减1计数方式。</p><p>波特率发生器方式及可编程时钟输出：</p><p>当特殊功能寄存器T2CON中的RCLK和TCLK位均置一时或者其中某位为１时，串行口进行接收／发送工作，T2可工作于波特率发生器方式，还可作为可编程时钟输出。</p><p>对外部输入的计数信号的要求：由于确认一次负跳变要花2个机器周期，即24个振荡周期，因此计数器可对外部输入计数脉冲的最高计数频率为系统振荡器频率的1/24.</p><p>01</p><p>AT89S52的串行口</p><p>单片机的数据通信有并行通信和串行通信两种方式。</p><p>并行通信通常使用多条数据线将数据字节的各个位同时传送，这种方法适合于短距离的传送。</p><p>串行通信是将数据分成一位一位的形式在一条传输线上逐个传送。</p><p>串行通信又有两种方式：异步通信和同步通信。</p><p>同步串行通信时采用一个同步时钟，通过一条同步时钟线，加到收发双方，使收发双方达到完全同步，此时，传输数据的位之间的距离均为“位间隔”的整数倍，同时传送的字符间不留间隙，即保持同步关系。</p><p>异步串行通信是指收发双方使用各自的时钟控制数据的发送和接收，这样可省去一条同步时钟信号线，使得异步串行通信更加简单，为使收发双方协调，要求收发双方的时钟尽可能一致。</p><p>异步串行通信是以数据帧为单位进行数据传输，各数据帧之间的间隔是任意的，但每个数据帧中的各位是以固定的时间传送的。</p><p>串行通信的传输方式：单工，半双工，全双工；</p><p>串行通信的错误校验：<br>奇偶校验：串行发送数据时，数据位尾随1位奇偶校验位（1或0）.<br>代码和校验：代码和校验是发送方将所发数据块求和或各字节异或，产生一个字节的校验字符附加到数据块末尾。<br>循环冗余码校验：通过某种数学运算实现有效信息与校验位之间的循环校验。</p><p>串行口的结构：</p><p>AT89S52单片机片内集成了一个通用的异步收发的全双工串行口。</p><p>发送缓冲器只能写入不能读出，接收缓冲器只能读出不能写入，两个缓冲器共用一个特殊功能寄存器，其字节地址为99H。</p><p>串行口的控制寄存器SCON（可位寻址）<br>各位功能：</p><p>SM0、SM1——串行口4种工作方式选择位</p><p>SM2——多机通信控制位</p><p>REN——允许串行接收位</p><p>TB8——发送的第9位数据</p><p>RB8——接收的第9位数据</p><p>TI——发送中断标志位</p><p>RI——接收中断标志位</p><p>特殊功能寄存器PCON（不可位寻址）</p><p>SMOD位：波特率选择位（波特率倍增位）</p><p>串行口的4种工作方式</p><p>方式0：</p><p>串行口的工作方式0为同步移位寄存器输入/输出方式，用于串行口外接移位寄存器，以扩展并行I/O口。</p><p>方式0以8位数据为一帧，没有起始位和终止位，先发送或接收最低位，波特率是固定的为Fosc/12.</p><p>方式1：</p><p>串行口的方式1为双机串行通信方式，当SM0、SM1两位为01时，为方式1；TXD脚和RXD脚分别用于发送和接收数据。</p><p>方式1收发一帧的数据为10位，1个起始位（0），8个数据位，1个停止位（1），先发送或接收最低位。串行口为波特率可变的8位异步通信接口。</p><p>方式一波特率=2^SMOD/32*定时器T1的溢出率。</p><p>方式2：</p><p>串行口工作于方式2和方式3时，被定义为9位异步通信接口。</p><p>每帧数据均为11位，1位起始位0，8位数据位（先低位），1位可程控为1或0的第9位数据和1位停止位。<br>方式2波特率=（2^SMOD/64）*F osc</p><p>方式3：<br>当SM0、SM1两位为11时，串行口被定义为方式3.方式3为波特率可变的9位异步通信方式，除波特率外，与方式2，3相同。</p><p>方式3波特率=（2^SMOD/32）*定时器T1溢出率</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章-传感器与检测技术概述</title>
      <link href="2020/09/23/%E7%AC%AC1%E7%AB%A0-%E4%BC%A0%E6%84%9F%E5%99%A8%E4%B8%8E%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/"/>
      <url>2020/09/23/%E7%AC%AC1%E7%AB%A0-%E4%BC%A0%E6%84%9F%E5%99%A8%E4%B8%8E%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>###传感器起源于仿生研究<br>    1）传感器位于研究对象与测控系统之间的接口位置，是感知、获取与检测信息的窗口。<br>    2）感知、通信和计算（采集、传输、处理）是ICT（Information and Communications Technology）技术的三大支柱。<br>    3）传感器是实现对物理环境或人类社会信息获取的基本工具，是检测系统的首要环节，是信息链的源头。（爬虫也算一种传感器）</p><p>###传感器的定义与组成<br>    1）根据我国标准传感器定义为：能感受被测量并按照一定规律转换成可用输出信号的器件或装置，通常由敏感元件和转换元件组成。<br>    2）敏感元件是指传感器中能直接感受或相应被测量的部分；<br>    3）转换原件是指传感器中能将敏感元件感受或相应的被测量转换成适于传输或测量的电信号部分；<br>    4）当输出为规定的标准信号时，则被称为变送器。<br>    5）传感器的共性就是利用物理定律或物质的物理、化学或生物特性，将非电量（如位移、加速度、速度、力等）输入转换成电量（电压、电流、频率、电荷、电容、电阻等）输出。</p><p>##传感器的基本组成部分为敏感元件和转换元件两部分，分别完成检测和转换两个基本功能。<br>    1）并不是所有传感器都能明显的区分这两个部分。他们可能直接将被测量直接转换为电信号输出，即合二为一。<br>    2）只由这两部分组成的传感器通常输出的信号较弱，还需要信号调理和转换电路将输出信号进行放大并转换为容易传输、处理、记录、显示的形式</p><p>##信号调理与转换电路的作用：<br>    1）把来自传感器的信号进行转移和放大<br>    2）进行信号处理</p><p>利用电路中电信号的强弱传送信息的方法称为电传送。</p><p>#传感器技术的发展趋势：传感器的无线化、微型化、集成化、网络化、智能化、安全化、虚拟化</p><p>#改善传感器性能的技术途径：<br>1.寻找新原理<br>2.开发新材料<br>3.采用新工艺<br>4.探索新功能</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First</title>
      <link href="2020/09/22/My-First/"/>
      <url>2020/09/22/My-First/</url>
      
        <content type="html"><![CDATA[<p>##第一章</p><p>内容</p><p>——————</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/22/hello-world/"/>
      <url>2020/09/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
